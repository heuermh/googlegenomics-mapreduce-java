/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * Modify at your own risk.
 */

package com.google.api.services.genomics.model;

/**
 * The variant search request.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Genomics API. For a detailed explanation see:
 * <a href="http://code.google.com/p/google-http-java-client/wiki/JSON">http://code.google.com/p/google-http-java-client/wiki/JSON</a>
 * </p>
 *
 */
@SuppressWarnings("javadoc")
public final class SearchVariantsRequest extends com.google.api.client.json.GenericJson {

  /**
   * Only return variant calls which belong to callsets with these ids. Leaving this blank returns
   * all variant calls. At most one of callsetNames or callsetIds should be provided.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> callsetIds;

  /**
   * Only return variant calls which belong to callsets which have exactly these names. Leaving this
   * blank returns all variant calls. At most one of callsetNames or callsetIds should be provided.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> callsetNames;

  /**
   * Required. Only return variants on this contig.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String contig;

  /**
   * Required. The ID of the dataset to search.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String datasetId;

  /**
   * Required. The end of the window (1-based, inclusive) for which overlapping variants should be
   * returned.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long endPosition;

  /**
   * The maximum number of variants to return.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.math.BigInteger maxResults;

  /**
   * The continuation token, which is used to page through large result sets. To get the next page
   * of results, set this parameter to the value of "nextPageToken" from the previous response.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String pageToken;

  /**
   * Required. The beginning of the window (1-based) for which overlapping variants should be
   * returned.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long startPosition;

  /**
   * Only return variants which have exactly this name.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String variantName;

  /**
   * Only return variant calls which belong to callsets with these ids. Leaving this blank returns
   * all variant calls. At most one of callsetNames or callsetIds should be provided.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCallsetIds() {
    return callsetIds;
  }

  /**
   * Only return variant calls which belong to callsets with these ids. Leaving this blank returns
   * all variant calls. At most one of callsetNames or callsetIds should be provided.
   * @param callsetIds callsetIds or {@code null} for none
   */
  public SearchVariantsRequest setCallsetIds(java.util.List<java.lang.String> callsetIds) {
    this.callsetIds = callsetIds;
    return this;
  }

  /**
   * Only return variant calls which belong to callsets which have exactly these names. Leaving this
   * blank returns all variant calls. At most one of callsetNames or callsetIds should be provided.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getCallsetNames() {
    return callsetNames;
  }

  /**
   * Only return variant calls which belong to callsets which have exactly these names. Leaving this
   * blank returns all variant calls. At most one of callsetNames or callsetIds should be provided.
   * @param callsetNames callsetNames or {@code null} for none
   */
  public SearchVariantsRequest setCallsetNames(java.util.List<java.lang.String> callsetNames) {
    this.callsetNames = callsetNames;
    return this;
  }

  /**
   * Required. Only return variants on this contig.
   * @return value or {@code null} for none
   */
  public java.lang.String getContig() {
    return contig;
  }

  /**
   * Required. Only return variants on this contig.
   * @param contig contig or {@code null} for none
   */
  public SearchVariantsRequest setContig(java.lang.String contig) {
    this.contig = contig;
    return this;
  }

  /**
   * Required. The ID of the dataset to search.
   * @return value or {@code null} for none
   */
  public java.lang.String getDatasetId() {
    return datasetId;
  }

  /**
   * Required. The ID of the dataset to search.
   * @param datasetId datasetId or {@code null} for none
   */
  public SearchVariantsRequest setDatasetId(java.lang.String datasetId) {
    this.datasetId = datasetId;
    return this;
  }

  /**
   * Required. The end of the window (1-based, inclusive) for which overlapping variants should be
   * returned.
   * @return value or {@code null} for none
   */
  public java.lang.Long getEndPosition() {
    return endPosition;
  }

  /**
   * Required. The end of the window (1-based, inclusive) for which overlapping variants should be
   * returned.
   * @param endPosition endPosition or {@code null} for none
   */
  public SearchVariantsRequest setEndPosition(java.lang.Long endPosition) {
    this.endPosition = endPosition;
    return this;
  }

  /**
   * The maximum number of variants to return.
   * @return value or {@code null} for none
   */
  public java.math.BigInteger getMaxResults() {
    return maxResults;
  }

  /**
   * The maximum number of variants to return.
   * @param maxResults maxResults or {@code null} for none
   */
  public SearchVariantsRequest setMaxResults(java.math.BigInteger maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * The continuation token, which is used to page through large result sets. To get the next page
   * of results, set this parameter to the value of "nextPageToken" from the previous response.
   * @return value or {@code null} for none
   */
  public java.lang.String getPageToken() {
    return pageToken;
  }

  /**
   * The continuation token, which is used to page through large result sets. To get the next page
   * of results, set this parameter to the value of "nextPageToken" from the previous response.
   * @param pageToken pageToken or {@code null} for none
   */
  public SearchVariantsRequest setPageToken(java.lang.String pageToken) {
    this.pageToken = pageToken;
    return this;
  }

  /**
   * Required. The beginning of the window (1-based) for which overlapping variants should be
   * returned.
   * @return value or {@code null} for none
   */
  public java.lang.Long getStartPosition() {
    return startPosition;
  }

  /**
   * Required. The beginning of the window (1-based) for which overlapping variants should be
   * returned.
   * @param startPosition startPosition or {@code null} for none
   */
  public SearchVariantsRequest setStartPosition(java.lang.Long startPosition) {
    this.startPosition = startPosition;
    return this;
  }

  /**
   * Only return variants which have exactly this name.
   * @return value or {@code null} for none
   */
  public java.lang.String getVariantName() {
    return variantName;
  }

  /**
   * Only return variants which have exactly this name.
   * @param variantName variantName or {@code null} for none
   */
  public SearchVariantsRequest setVariantName(java.lang.String variantName) {
    this.variantName = variantName;
    return this;
  }

  @Override
  public SearchVariantsRequest set(String fieldName, Object value) {
    return (SearchVariantsRequest) super.set(fieldName, value);
  }

  @Override
  public SearchVariantsRequest clone() {
    return (SearchVariantsRequest) super.clone();
  }

}
