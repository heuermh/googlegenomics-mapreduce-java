/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * Modify at your own risk.
 */

package com.google.api.services.genomics.model;

/**
 * A Variant represents a change in DNA sequence relative to some reference. For example, a Variant
 * could represent a SNP or an insertion. Variants belong to a Dataset.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Genomics API. For a detailed explanation see:
 * <a href="http://code.google.com/p/google-http-java-client/wiki/JSON">http://code.google.com/p/google-http-java-client/wiki/JSON</a>
 * </p>
 *
 */
@SuppressWarnings("javadoc")
public final class Variant extends com.google.api.client.json.GenericJson {

  /**
   * The bases that appear instead of the reference bases.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> alternateBases;

  /**
   * The variant calls for this particular variant. Each one represents the determination of
   * genotype with respect to this variant.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<Call> calls;

  static {
    // hack to force ProGuard to consider Call used, since otherwise it would be stripped out
    // see http://code.google.com/p/google-api-java-client/issues/detail?id=528
    com.google.api.client.util.Data.nullOf(Call.class);
  }

  /**
   * The contig on which this variant occurs. (e.g. 'chr20' or 'X')
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String contig;

  /**
   * The date this variant was created in milliseconds from the epoch.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long created;

  /**
   * The ID of the dataset this variant belongs to.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String datasetId;

  /**
   * The variant ID.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String id;

  /**
   * A map of additional variant information.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.Map<String, java.util.List<java.lang.String>> info;

  /**
   * Names for the variant, for example a RefSNP ID.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.util.List<java.lang.String> names;

  /**
   * The position at which this variant occurs (1-based). This corresponds to the first base of the
   * string of reference bases.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key @com.google.api.client.json.JsonString
  private java.lang.Long position;

  /**
   * The reference bases for this variant. They start at the given position.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String referenceBases;

  /**
   * The bases that appear instead of the reference bases.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getAlternateBases() {
    return alternateBases;
  }

  /**
   * The bases that appear instead of the reference bases.
   * @param alternateBases alternateBases or {@code null} for none
   */
  public Variant setAlternateBases(java.util.List<java.lang.String> alternateBases) {
    this.alternateBases = alternateBases;
    return this;
  }

  /**
   * The variant calls for this particular variant. Each one represents the determination of
   * genotype with respect to this variant.
   * @return value or {@code null} for none
   */
  public java.util.List<Call> getCalls() {
    return calls;
  }

  /**
   * The variant calls for this particular variant. Each one represents the determination of
   * genotype with respect to this variant.
   * @param calls calls or {@code null} for none
   */
  public Variant setCalls(java.util.List<Call> calls) {
    this.calls = calls;
    return this;
  }

  /**
   * The contig on which this variant occurs. (e.g. 'chr20' or 'X')
   * @return value or {@code null} for none
   */
  public java.lang.String getContig() {
    return contig;
  }

  /**
   * The contig on which this variant occurs. (e.g. 'chr20' or 'X')
   * @param contig contig or {@code null} for none
   */
  public Variant setContig(java.lang.String contig) {
    this.contig = contig;
    return this;
  }

  /**
   * The date this variant was created in milliseconds from the epoch.
   * @return value or {@code null} for none
   */
  public java.lang.Long getCreated() {
    return created;
  }

  /**
   * The date this variant was created in milliseconds from the epoch.
   * @param created created or {@code null} for none
   */
  public Variant setCreated(java.lang.Long created) {
    this.created = created;
    return this;
  }

  /**
   * The ID of the dataset this variant belongs to.
   * @return value or {@code null} for none
   */
  public java.lang.String getDatasetId() {
    return datasetId;
  }

  /**
   * The ID of the dataset this variant belongs to.
   * @param datasetId datasetId or {@code null} for none
   */
  public Variant setDatasetId(java.lang.String datasetId) {
    this.datasetId = datasetId;
    return this;
  }

  /**
   * The variant ID.
   * @return value or {@code null} for none
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * The variant ID.
   * @param id id or {@code null} for none
   */
  public Variant setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  /**
   * A map of additional variant information.
   * @return value or {@code null} for none
   */
  public java.util.Map<String, java.util.List<java.lang.String>> getInfo() {
    return info;
  }

  /**
   * A map of additional variant information.
   * @param info info or {@code null} for none
   */
  public Variant setInfo(java.util.Map<String, java.util.List<java.lang.String>> info) {
    this.info = info;
    return this;
  }

  /**
   * Names for the variant, for example a RefSNP ID.
   * @return value or {@code null} for none
   */
  public java.util.List<java.lang.String> getNames() {
    return names;
  }

  /**
   * Names for the variant, for example a RefSNP ID.
   * @param names names or {@code null} for none
   */
  public Variant setNames(java.util.List<java.lang.String> names) {
    this.names = names;
    return this;
  }

  /**
   * The position at which this variant occurs (1-based). This corresponds to the first base of the
   * string of reference bases.
   * @return value or {@code null} for none
   */
  public java.lang.Long getPosition() {
    return position;
  }

  /**
   * The position at which this variant occurs (1-based). This corresponds to the first base of the
   * string of reference bases.
   * @param position position or {@code null} for none
   */
  public Variant setPosition(java.lang.Long position) {
    this.position = position;
    return this;
  }

  /**
   * The reference bases for this variant. They start at the given position.
   * @return value or {@code null} for none
   */
  public java.lang.String getReferenceBases() {
    return referenceBases;
  }

  /**
   * The reference bases for this variant. They start at the given position.
   * @param referenceBases referenceBases or {@code null} for none
   */
  public Variant setReferenceBases(java.lang.String referenceBases) {
    this.referenceBases = referenceBases;
    return this;
  }

  @Override
  public Variant set(String fieldName, Object value) {
    return (Variant) super.set(fieldName, value);
  }

  @Override
  public Variant clone() {
    return (Variant) super.clone();
  }

}
